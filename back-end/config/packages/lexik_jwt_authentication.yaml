lexik_jwt_authentication:
    secret_key: '%env(resolve:JWT_SECRET_KEY)%'
    #secret_key: '%kernel.project_dir%/config/jwt/private.pem' # required for token creation
    public_key: '%env(resolve:JWT_PUBLIC_KEY)%'
    #public_key: '%kernel.project_dir%/config/jwt/public.pem'  # required for token verification
    pass_phrase: '%env(JWT_PASSPHRASE)%'
    #pass_phrase: '2a785cd86ad8b9eb0f87a2f33ef68eef' # required for token creation, usage of an environment variable is recommended
    token_ttl: 3600
    user_identity_field: email  # key under which the user identity will be stored in the token payload
    clock_skew: 0

    # token encoding/decoding settings
    encoder:
        # token encoder/decoder service - default implementation based on the lcobucci/jwt library
        service:            lexik_jwt_authentication.encoder.lcobucci
        # encryption algorithm used by the encoder service
        signature_algorithm: RS256
    token_extractors:
        # look for a token as Authorization Header
        authorization_header:
            enabled: true
            prefix:  Bearer
            name:    Authorization
        # check token in a cookie
        cookie:
            enabled: false
            name:    BEARER
        # check token in query string parameter
        query_parameter:
            enabled: false
            name:    bearer
        # check token in a cookie
        split_cookie:
            enabled: false
            cookies:
                - jwt_hp
                - jwt_s